While ([
    initValue1 = 1 ;
    initValue2 = 2 ;
    ~errorMessage = "" ;
    isExit = False
];
not isExit;
[
    // Stacked continuation checks
    isExit = Case ( isExit ; True // Don't run checks if we've already bailed
    ;   IsEmpty ( initValue1 ) ; True 
    ;   IsEmpty ( initValue2 ) ; True
    ) ;
    ~errorMessage = Case ( Length ( ~errorMessage ) ; ~errorMessage
    ;   isExit ; "Missing a required parameter, please check inputs." // Non-specific error message, but we know what section of the code to look at. Easy to add more specific details if we want.
    ) ; 

    // No guard clauses, not worth the effort to bail out early
    $1 = initValue1 ;
    $2 = initValue2 ;
    $computationallyCheapFunction = 1+1;
    $doSomeEasyStuff = "Do Some Easy Stuff" ;

    // Before we do something slow/expensive, let's set a guard clause with an error message.
    isExit = Case ( isExit ; True
    ;   Length ($1) and Length ($2) ; True // If both $1 and $2 are empty, we don't need to do the expensive stuff
    ) ;
    ~errorMessage = Case ( Length ( ~errorMessage ) ; ~errorMessage
    ;   isExit ; "Error: " & $1 & " " & $2 & " cannot both be set."
    );

    $3 = If ( not isExit ;
    "Do some hard stuff" // Do something slow, like iterating over a list of 10^6 items
    ) ;

    // DEBUG: Always fail here
    isExit = True ;
    ~errorMessage = If ( isExit ; "DEBUG: Always fail here" );

    ~calcResult = List ( $1 ; $2 ; $3 ; ~errorMessage ) ;
    isExit = True ;

    ~returnResult = If ( Length ( ~errorMessage ) ; "? - " & ~errorMessage ; /** ELSE **/ ~calcResult )
];
~returnResult
)